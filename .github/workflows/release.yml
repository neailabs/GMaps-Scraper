name: Build and Release Desktop App

on:
  push:
    tags:
      - 'v*.*.*' # This workflow runs when you push a new Git tag like v1.0.0, v1.0.1, etc.

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Install dependencies from your requirements.txt

    - name: Create version info file
      run: |
        # Extract version from git tag (remove 'v' prefix)
        $version = "${{ github.ref_name }}" -replace '^v', ''
        $versionParts = $version -split '\.'
        $major = $versionParts[0]
        $minor = $versionParts[1]
        $patch = $versionParts[2]
        
        # Create version_info.txt with dynamic version
        @"
        # version_info.txt
        # UTF-8
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($major, $minor, $patch, 0),
            prodvers=($major, $minor, $patch, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x4,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'NE AI Innovation Labs'),
                StringStruct(u'FileDescription', u'GMaps Scraper - Google Maps Business Data Extractor'),
                StringStruct(u'FileVersion', u'$version.0'),
                StringStruct(u'InternalName', u'GMaps-Scraper'),
                StringStruct(u'LegalCopyright', u'Copyright Â© 2025 NE AI Innovation Labs. All rights reserved.'),
                StringStruct(u'OriginalFilename', u'GMaps-Scraper.exe'),
                StringStruct(u'ProductName', u'GMaps Scraper'),
                StringStruct(u'ProductVersion', u'$version.0'),
                StringStruct(u'LegalTrademarks', u''),
                StringStruct(u'Comments', u'Extract business information from Google Maps searches')])
              ]), 
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -FilePath "version_info.txt" -Encoding UTF8

    - name: Build Windows Executable
      run: |
        # Build with version info file
        pyinstaller --noconsole --onefile --windowed --version-file=version_info.txt GMaps-Scraper.py

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: GMaps-Scraper-Windows
        path: dist/GMaps-Scraper.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies (for PySide6 on Linux)
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-cursor0 # Essential for PySide6 on many Linux systems

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Linux Executable
      run: |
        # insert version info file creation
        export APP_VERSION="${{ github.ref_name }}"
        export APP_VERSION=${APP_VERSION#v}
        pyinstaller --noconsole --onefile --name="GMaps Scraper" GMaps-Scraper.py

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: GMaps-Scraper-Linux
        # PyInstaller --onefile on Linux creates an executable without an extension
        # it might also create a directory with the same name if not --onefile
        path: dist/GMaps-Scraper

  build-macos:
    runs-on: macos-latest # This runner is Apple Silicon (arm64) by default
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        # If you specifically need an Intel macOS build, you might try:
        # architecture: 'x64' # This *might* install x86_64 Python.
        # And then run pyinstaller with 'arch -x86_64 python -m PyInstaller ...'
        # However, `macos-latest` is ARM-based, so a native ARM build is standard.

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build macOS Application (Apple Silicon)
      run: |
        # PyInstaller creates a .app bundle within the dist directory
        export APP_VERSION="${{ github.ref_name }}"
        export APP_VERSION=${APP_VERSION#v}
        pyinstaller --noconsole --onefile --windowed --name "GMaps Scraper" GMaps-Scraper.py

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: GMaps-Scraper-MacOS-Silicon
        path: dist/*.app # Catches the .app bundle (e.g., dist/app.app)

  create-release:
    # This job depends on all build jobs completing successfully
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest # A small Linux runner for the release step
    permissions:
      contents: write # Grant permission to write to GitHub Releases
    if: success() # Only create the release if all previous build jobs succeeded

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4 # Action to download the artifacts from previous jobs
      with:
        path: artifacts # All downloaded artifacts will be placed in this directory

    - name: List downloaded artifacts (for debugging, optional)
      run: ls -R artifacts

    - name: Create GitHub Release
      id: create_release # Assign an ID to this step to reference its outputs
      uses: softprops/action-gh-release@v2 # A popular action for creating GitHub Releases
      with:
        # Files to upload to the release. Paths are relative to the working directory.
        # Fixed paths to match the actual directory structure created by download-artifact
        files: |
          artifacts/GMaps-Scraper-Windows/GMaps-Scraper.exe
          artifacts/GMaps-Scraper-Linux/GMaps-Scraper
          artifacts/GMaps-Scraper-MacOS-Silicon/*.app

        name: Release ${{ github.ref_name }} # Release name (e.g., "Release v1.0.0")
        tag_name: ${{ github.ref_name }} # The Git tag that triggered the workflow (e.g., "v1.0.0")
        body: | # Release notes in Markdown
          # Release ${{ github.ref_name }}

          This release provides binaries for:
          - **Windows** (.exe)
          - **Linux** (Executable)
          - **macOS** (Apple Silicon .app)

          ## How to Install/Run:
          * **Windows**: Download `GMaps-Scraper.exe` and run it directly.
          * **Linux**: Download `GMaps-Scraper`, make it executable with `chmod +x GMaps-Scraper`, then run it.
          * **macOS (Apple Silicon)**: Download the `.app` file and drag it to your Applications folder.

          ## Changes in this release:
          Added Windows executable metadata and fixed artifact upload paths
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions for authentication